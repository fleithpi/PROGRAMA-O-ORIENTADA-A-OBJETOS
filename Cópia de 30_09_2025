{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"10HOi5saVxssYv-1UnQ082L1TDUu-ejPT","timestamp":1759279111546},{"file_id":"16tDGxNA42oP0Bx74CpWuGJU4nAvbp7hC","timestamp":1759274015258}],"authorship_tag":"ABX9TyNjxKHCmgLSUi8+iBt4fCLs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import math\n","\n","class quadrado:\n","\n","  def __init__(self, lado):\n","    self.lado = lado\n","  def area (self):\n","      return self.lado **2\n","\n","  def perimetro(self):\n","      return self.lado * 4\n","\n","  def alterar_lado(self, novo_lado):\n","            self.lado = novo_lado\n","\n","  def verificar_igualdade(self, outro_quadrado):\n","      return self.lado == outro_quadrado.lado\n","\n","  def quadrado_perfeito(self):\n","      return math.isqrt(self.lado)**2 == self.lado\n","\n","  def calcular_diagonal(self):\n","    return math.sqrt(2)*self.lado\n","\n","  def redimensionar (self, fator):\n","     self.lado *= fator\n","\n","\n","\n"],"metadata":{"id":"l13TyNA-t2mN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","q1 = quadrado(2)\n","q2 = quadrado(2)\n","\n","novolado = 2\n","\n","\n","print(f\"lado quadrado:{q1.area()}\")\n","print(f\"perimetro: {q1.perimetro()}\")\n","print(f\"novo lado:{q1.alterar_lado(novolado)}\")\n","print(f\"quadrados iguais?:{q1.verificar_igualdade(q2)}\")\n","print(f\"quadrado perfeito {q1.quadrado_perfeito()}\")\n","print(f\"diagonal é : {q1.calcular_diagonal()}\")\n","print(f\"o lado do quadrado multiplicado pelo fator é :{(q1.lado)}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"z44TXjYHw1fW","executionInfo":{"status":"error","timestamp":1759274009881,"user_tz":180,"elapsed":43,"user":{"displayName":"Pietro Fleith","userId":"05944635742924198992"}},"outputId":"a8f33e7a-76b6-4781-e288-f28916ea914b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lado quadrado:4\n","perimetro: 8\n","novo lado:None\n","quadrados iguais?:True\n","quadrado perfeito False\n"]},{"output_type":"error","ename":"AttributeError","evalue":"'quadrado' object has no attribute 'calcular_diagonal'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-4056969696.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"quadrados iguais?:{q1.verificar_igualdade(q2)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"quadrado perfeito {q1.quadrado_perfeito()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"diagonal é : {q1.calcular_diagonal()}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"o lado do quadrado multiplicado pelo fator é :{(q1.lado)}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'quadrado' object has no attribute 'calcular_diagonal'"]}]},{"cell_type":"code","source":["class conta:\n","  def __init__(self, titular, saldo_inicial=0.0):\n","\n","      self.titular = titular\n","      self.saldo = float(saldo_inicial)\n","\n","  def depositar(self, valor):\n","    if valor > 0 :\n","      self.saldo += valor\n","\n","       return (f\"deposito de R$:{valor:.2f}\")\n","    else:\n","       return (\"erro valor deve ser positivo\")\n","\n","  def sacar(self, valor):\n","    if valor <= 0:\n","      return (\"valor deve ser positivo\")\n","\n","    if self.saldo >= valor:\n","        self.saldo -= valor\n","      return (f\"saque de R$:{valor:.2f} realizado. \")\n","    else:\n","      return (f\"saldo insuficiente. saldo atual R$:{self.saldo:.2f}\")\n","\n","\n","\n","  def exibir_saldo(self):\n","     return (f\"titular: {self.titular}SALDO ATUAL {self.saldo:.2f}\")\n","\n","\n","conta = conta(titular=\"Ana Silva\", saldo_inicial=500.00)\n","conta.exibir_saldo() # Saldo Inicial: R$500.00\n","\n","# 2. Realizando um depósito\n","conta.depositar(155.50)\n","conta.exibir_saldo() # Saldo Atual: R$650.50\n","\n","# 3. Tentando um saque bem-sucedido\n","conta.sacar(100.00)\n","conta.exibir_saldo() # Saldo Atual: R$550.50\n","\n","# 4. Tentando um saque que excede o saldo\n","conta.sacar(105500.00)\n","conta.exibir_saldo() # Saldo Atual: R$550.50 (Não mudou)\n","\n"],"metadata":{"id":"cVgMhWKlyAne","colab":{"base_uri":"https://localhost:8080/","height":111},"executionInfo":{"status":"error","timestamp":1759277986947,"user_tz":180,"elapsed":17,"user":{"displayName":"Pietro Fleith","userId":"05944635742924198992"}},"outputId":"aaaf91a8-0338-4881-ab5d-4573a93405ee"},"execution_count":38,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 21)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m21\u001b[0m\n\u001b[0;31m    return (f\"saque de R$:{valor:.2f} realizado. \")\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}]},{"cell_type":"code","source":["\n","  print(f\"deposito de R$:{valor: 2f} realizado com sucesso\")\n","  print(f\"erro valor deve ser positivo.\")\n","  print(\"erro valor deve ser positivo\")\n","  print(f\"saque de R$:{valor:.2f}\")\n","\n","\n","  print(f\"\\n--DETALHES  DA CONTA ---\")\n","  print(f\"titular: {self.titular}\")\n","  print(f\"saldo atual: R$:{self.saldo:.2f}\")\n","\n","\n","conta = conta(titular=\"Ana Silva\", saldo_inicial=500.00)\n","conta.exibir_saldo() # Saldo Inicial: R$500.00\n","\n","# 2. Realizando um depósito\n","conta.depositar(150.50)\n","conta.exibir_saldo() # Saldo Atual: R$650.50\n","\n","# 3. Tentando um saque bem-sucedido\n","conta.sacar(100.00)\n","conta.exibir_saldo() # Saldo Atual: R$550.50\n","\n","# 4. Tentando um saque que excede o saldo\n","conta.sacar(1000.00)\n","conta.exibir_saldo() # Saldo Atual: R$550.50 (Não mudou)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":222},"id":"b6LvmC_6CTtP","executionInfo":{"status":"error","timestamp":1759277989259,"user_tz":180,"elapsed":18,"user":{"displayName":"Pietro Fleith","userId":"05944635742924198992"}},"outputId":"90debe26-2fb8-421f-d1a1-41ae083a069b"},"execution_count":39,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'valor' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-4227825111.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"deposito de R$:{valor: 2f} realizado com sucesso\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"erro valor deve ser positivo.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"erro valor deve ser positivo\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"saque de R$:{valor:.2f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'valor' is not defined"]}]},{"cell_type":"code","source":["class Conta:\n","  def __init__(self, titular, saldo_inicial=0.0):\n","      # O construtor define os atributos iniciais\n","      self.titular = titular\n","      self.saldo = float(saldo_inicial)\n","\n","  def depositar(self, valor):\n","    if valor > 0:\n","      self.saldo += valor\n","      # CORRIGIDO: Alinhado com self.saldo\n","      return (f\"Depósito de R$ {valor:.2f} realizado.\")\n","    else:\n","      # CORRIGIDO: Alinhado com o 'if'\n","      return \"Erro: O valor do depósito deve ser positivo.\"\n","\n","  def sacar(self, valor):\n","    if valor <= 0:\n","      return \"Erro: O valor do saque deve ser positivo.\"\n","\n","    if self.saldo >= valor:\n","        self.saldo -= valor\n","        # CORRIGIDO: Alinhado com self.saldo -= valor\n","        return (f\"Saque de R$ {valor:.2f} realizado.\")\n","    else:\n","      # CORRIGIDO: Alinhado com o 'if'/'else'\n","      return (f\"Erro: Saldo insuficiente. Saldo atual R$ {self.saldo:.2f}\")\n","\n","  def exibir_saldo(self):\n","     # Retorna uma string formatada com os detalhes\n","     return (f\"Titular: {self.titular} | Saldo Atual: R$ {self.saldo:.2f}\")\n","\n","\n","# --- Demonstração das Operações ---\n"],"metadata":{"id":"01-YiplbJHBP","executionInfo":{"status":"ok","timestamp":1759278055009,"user_tz":180,"elapsed":15,"user":{"displayName":"Pietro Fleith","userId":"05944635742924198992"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["\n","print(\"--- Demonstração da Conta ---\")\n","\n","# 1. Criação da conta\n","conta = Conta(titular=\"Ana Silva\", saldo_inicial=500.00)\n","print(f\"Status Inicial: {conta.exibir_saldo()}\")\n","\n","# 2. Realizando um depósito\n","valor_deposito = 155.50\n","print(f\"\\n[OPERAÇÃO] {conta.depositar(valor_deposito)}\")\n","print(f\"Status Atual: {conta.exibir_saldo()}\")\n","\n","# 3. Tentando um saque bem-sucedido\n","valor_saque_ok = 100.00\n","print(f\"\\n[OPERAÇÃO] {conta.sacar(valor_saque_ok)}\")\n","print(f\"Status Atual: {conta.exibir_saldo()}\")\n","\n","# 4. Tentando um saque que excede o saldo\n","valor_saque_fail = 105500.00\n","print(f\"\\n[OPERAÇÃO] {conta.sacar(valor_saque_fail)}\")\n","print(f\"Status Final: {conta.exibir_saldo()}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4E1ssCu9JKyz","executionInfo":{"status":"ok","timestamp":1759278059066,"user_tz":180,"elapsed":37,"user":{"displayName":"Pietro Fleith","userId":"05944635742924198992"}},"outputId":"3e444f97-b9cb-4fd6-c929-297968d1c3e9"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Demonstração da Conta ---\n","Status Inicial: Titular: Ana Silva | Saldo Atual: R$ 500.00\n","\n","[OPERAÇÃO] Depósito de R$ 155.50 realizado.\n","Status Atual: Titular: Ana Silva | Saldo Atual: R$ 655.50\n","\n","[OPERAÇÃO] Saque de R$ 100.00 realizado.\n","Status Atual: Titular: Ana Silva | Saldo Atual: R$ 555.50\n","\n","[OPERAÇÃO] Erro: Saldo insuficiente. Saldo atual R$ 555.50\n","Status Final: Titular: Ana Silva | Saldo Atual: R$ 555.50\n"]}]}]}